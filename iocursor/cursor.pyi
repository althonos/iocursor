import io
import os
import typing

Buffer = typing.Union[bytes, bytearray, memoryview]
B = typing.TypeVar("B", bytes, bytearray, memoryview)


class Cursor(typing.BinaryIO, typing.Generic[B]):
    def __init__(self, buffer: B) -> None: ...
    def close(self) -> None: ...
    def fileno(self) -> int: ...
    def flush(self) -> None: ...
    def isatty(self) -> bool: ...
    def read(self, size: typing.Optional[int] = -1) -> bytes: ...
    def readable(self) -> bool: ...
    def readline(self, size: typing.Optional[int] = -1) -> bytes: ...
    def readlines(self, hint: typing.Optional[int] = -1) -> typing.List[bytes]: ...
    def seekable(self) -> bool: ...
    def seek(self, offset: int, whence: int = os.SEEK_SET) -> int: ...
    def tell(self) -> int: ...
    def truncate(self, size: typing.Optional[int] = None) -> int: ...
    def writable(self) -> bool: ...
    def writelines(self, lines: typing.Iterable[Buffer]) -> None: ...
    def read1(self, size: typing.Optional[int] = -1) -> bytes: ...
    def readinto(self, b: Buffer) -> int: ...
    def readinto1(self, b: Buffer) -> int: ...
    def write(self, b: Buffer) -> int: ...
    def getvalue(self) -> B: ...
